/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class Registry extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): Registry;
  methods: {
    setOwner(_new: string): TransactionObject<void>;

    owner(): TransactionObject<string>;

    fee(): TransactionObject<BN>;

    reserve(_name: string | number[]): TransactionObject<boolean>;

    transfer(_name: string | number[], _to: string): TransactionObject<boolean>;

    drop(_name: string | number[]): TransactionObject<boolean>;

    setData(
      _name: string | number[],
      _key: string,
      _value: string | number[]
    ): TransactionObject<boolean>;

    setAddress(
      _name: string | number[],
      _key: string,
      _value: string
    ): TransactionObject<boolean>;

    setUint(
      _name: string | number[],
      _key: string,
      _value: number | string
    ): TransactionObject<boolean>;

    proposeReverse(_name: string, _who: string): TransactionObject<boolean>;

    confirmReverse(_name: string): TransactionObject<boolean>;

    confirmReverseAs(_name: string, _who: string): TransactionObject<boolean>;

    removeReverse(): TransactionObject<void>;

    setFee(_amount: number | string): TransactionObject<boolean>;

    drain(): TransactionObject<boolean>;

    getData(_name: string | number[], _key: string): TransactionObject<string>;

    getAddress(
      _name: string | number[],
      _key: string
    ): TransactionObject<string>;

    getUint(_name: string | number[], _key: string): TransactionObject<BN>;

    getOwner(_name: string | number[]): TransactionObject<string>;

    hasReverse(_name: string | number[]): TransactionObject<boolean>;

    getReverse(_name: string | number[]): TransactionObject<string>;

    canReverse(_data: string): TransactionObject<boolean>;

    reverse(_data: string): TransactionObject<string>;

    reserved(_name: string | number[]): TransactionObject<boolean>;
  };
  events: {
    Drained: ContractEvent<BN>;
    FeeChanged: ContractEvent<BN>;
    ReverseProposed: ContractEvent<{
      name: string;
      reverse: string;
      0: string;
      1: string;
    }>;
    ReverseConfirmed: ContractEvent<{
      name: string;
      reverse: string;
      0: string;
      1: string;
    }>;
    ReverseRemoved: ContractEvent<{
      name: string;
      reverse: string;
      0: string;
      1: string;
    }>;
    Reserved: ContractEvent<{
      name: string;
      owner: string;
      0: string;
      1: string;
    }>;
    Transferred: ContractEvent<{
      name: string;
      oldOwner: string;
      newOwner: string;
      0: string;
      1: string;
      2: string;
    }>;
    Dropped: ContractEvent<{
      name: string;
      owner: string;
      0: string;
      1: string;
    }>;
    DataChanged: ContractEvent<{
      name: string;
      key: string;
      plainKey: string;
      0: string;
      1: string;
      2: string;
    }>;
    NewOwner: ContractEvent<{
      old: string;
      current: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
