/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class IValidatorSetAuRa extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): IValidatorSetAuRa;
  methods: {
    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: (string)[],
      arg4: (string)[],
      arg5: boolean
    ): TransactionObject<void>;

    newValidatorSet(): TransactionObject<void>;

    removeMaliciousValidators(arg0: (string)[]): TransactionObject<void>;

    setStakingAddress(arg0: string, arg1: string): TransactionObject<void>;

    areDelegatorsBanned(arg0: string): TransactionObject<boolean>;

    blockRewardContract(): TransactionObject<string>;

    changeRequestCount(): TransactionObject<BN>;

    emitInitiateChangeCallable(): TransactionObject<boolean>;

    getPendingValidators(): TransactionObject<(string)[]>;

    getPreviousValidators(): TransactionObject<(string)[]>;

    getValidators(): TransactionObject<(string)[]>;

    isReportValidatorValid(arg0: string): TransactionObject<boolean>;

    isValidator(arg0: string): TransactionObject<boolean>;

    isValidatorBanned(arg0: string): TransactionObject<boolean>;

    isValidatorOrPending(arg0: string): TransactionObject<boolean>;

    MAX_VALIDATORS(): TransactionObject<BN>;

    miningByStakingAddress(arg0: string): TransactionObject<string>;

    randomContract(): TransactionObject<string>;

    reportMaliciousCallable(
      arg0: string,
      arg1: string,
      arg2: number | string
    ): TransactionObject<{
      0: boolean;
      1: boolean;
    }>;

    stakingByMiningAddress(arg0: string): TransactionObject<string>;

    stakingContract(): TransactionObject<string>;

    unremovableValidator(): TransactionObject<string>;

    validatorSetApplyBlock(): TransactionObject<BN>;

    validatorsToBeFinalized(): TransactionObject<{
      0: (string)[];
      1: boolean;
    }>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
