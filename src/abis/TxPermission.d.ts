/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class TxPermission extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): TxPermission;
  methods: {
    BLOCK_GAS_LIMIT_REDUCED(): TransactionObject<BN>;

    BLOCK_GAS_LIMIT(): TransactionObject<BN>;

    validatorSetContract(): TransactionObject<string>;

    initialize(
      _allowed: (string)[],
      _validatorSet: string
    ): TransactionObject<void>;

    addAllowedSender(_sender: string): TransactionObject<void>;

    removeAllowedSender(_sender: string): TransactionObject<void>;

    contractName(): TransactionObject<string>;

    contractNameHash(): TransactionObject<string>;

    contractVersion(): TransactionObject<BN>;

    allowedSenders(): TransactionObject<(string)[]>;

    allowedTxTypes(
      _sender: string,
      _to: string,
      _value: number | string,
      _gasPrice: number | string,
      _data: string | number[]
    ): TransactionObject<{
      typesMask: BN;
      cache: boolean;
      0: BN;
      1: boolean;
    }>;

    blockGasLimit(): TransactionObject<BN>;

    isInitialized(): TransactionObject<boolean>;

    isSenderAllowed(_sender: string): TransactionObject<boolean>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
