/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ValidatorSetAuRa extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): ValidatorSetAuRa;
  methods: {
    miningByStakingAddress(arg0: string): TransactionObject<string>;

    bannedDelegatorsUntil(arg0: string): TransactionObject<BN>;

    banCounter(arg0: string): TransactionObject<BN>;

    stakingByMiningAddress(arg0: string): TransactionObject<string>;

    reportingCounter(
      arg0: string,
      arg1: number | string
    ): TransactionObject<BN>;

    blockRewardContract(): TransactionObject<string>;

    bannedUntil(arg0: string): TransactionObject<BN>;

    unremovableValidator(): TransactionObject<string>;

    MAX_VALIDATORS(): TransactionObject<BN>;

    isValidatorPrevious(arg0: string): TransactionObject<boolean>;

    validatorCounter(arg0: string): TransactionObject<BN>;

    validatorSetApplyBlock(): TransactionObject<BN>;

    banReason(arg0: string): TransactionObject<string>;

    randomContract(): TransactionObject<string>;

    changeRequestCount(): TransactionObject<BN>;

    reportingCounterTotal(arg0: number | string): TransactionObject<BN>;

    stakingContract(): TransactionObject<string>;

    isValidator(arg0: string): TransactionObject<boolean>;

    clearUnremovableValidator(): TransactionObject<void>;

    emitInitiateChange(): TransactionObject<void>;

    finalizeChange(): TransactionObject<void>;

    initialize(
      _blockRewardContract: string,
      _randomContract: string,
      _stakingContract: string,
      _initialMiningAddresses: (string)[],
      _initialStakingAddresses: (string)[],
      _firstValidatorIsUnremovable: boolean
    ): TransactionObject<void>;

    newValidatorSet(): TransactionObject<void>;

    removeMaliciousValidators(
      _miningAddresses: (string)[]
    ): TransactionObject<void>;

    reportMalicious(
      _maliciousMiningAddress: string,
      _blockNumber: number | string,
      arg2: string | number[]
    ): TransactionObject<void>;

    setStakingAddress(
      _miningAddress: string,
      _stakingAddress: string
    ): TransactionObject<void>;

    areDelegatorsBanned(_miningAddress: string): TransactionObject<boolean>;

    emitInitiateChangeCallable(): TransactionObject<boolean>;

    getPreviousValidators(): TransactionObject<(string)[]>;

    getPendingValidators(): TransactionObject<(string)[]>;

    getValidators(): TransactionObject<(string)[]>;

    initiateChangeAllowed(): TransactionObject<boolean>;

    isInitialized(): TransactionObject<boolean>;

    isReportValidatorValid(_miningAddress: string): TransactionObject<boolean>;

    isValidatorBanned(_miningAddress: string): TransactionObject<boolean>;

    isValidatorOrPending(_miningAddress: string): TransactionObject<boolean>;

    maliceReportedForBlock(
      _miningAddress: string,
      _blockNumber: number | string
    ): TransactionObject<(string)[]>;

    reportMaliciousCallable(
      _reportingMiningAddress: string,
      _maliciousMiningAddress: string,
      _blockNumber: number | string
    ): TransactionObject<{
      callable: boolean;
      removeReportingValidator: boolean;
      0: boolean;
      1: boolean;
    }>;

    validatorsToBeFinalized(): TransactionObject<{
      miningAddresses: (string)[];
      forNewEpoch: boolean;
      0: (string)[];
      1: boolean;
    }>;
  };
  events: {
    InitiateChange: ContractEvent<{
      parentHash: string;
      newSet: (string)[];
      0: string;
      1: (string)[];
    }>;
    ReportedMalicious: ContractEvent<{
      reportingValidator: string;
      maliciousValidator: string;
      blockNumber: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
