/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class IStakingAuRa extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): IStakingAuRa;
  methods: {
    clearUnremovableValidator(arg0: string): TransactionObject<void>;

    incrementStakingEpoch(): TransactionObject<void>;

    initialize(
      arg0: string,
      arg1: (string)[],
      arg2: number | string,
      arg3: number | string,
      arg4: number | string,
      arg5: number | string,
      arg6: number | string
    ): TransactionObject<void>;

    removePool(arg0: string): TransactionObject<void>;

    removePools(): TransactionObject<void>;

    setStakingEpochStartBlock(arg0: number | string): TransactionObject<void>;

    getPoolsLikelihood(): TransactionObject<{
      0: (BN)[];
      1: BN;
    }>;

    getPoolsToBeElected(): TransactionObject<(string)[]>;

    getPoolsToBeRemoved(): TransactionObject<(string)[]>;

    isPoolActive(arg0: string): TransactionObject<boolean>;

    MAX_CANDIDATES(): TransactionObject<BN>;

    orderedWithdrawAmount(arg0: string, arg1: string): TransactionObject<BN>;

    poolDelegators(arg0: string): TransactionObject<(string)[]>;

    rewardWasTaken(
      arg0: string,
      arg1: string,
      arg2: number | string
    ): TransactionObject<boolean>;

    stakeAmount(arg0: string, arg1: string): TransactionObject<BN>;

    stakeAmountTotal(arg0: string): TransactionObject<BN>;

    stakeFirstEpoch(arg0: string, arg1: string): TransactionObject<BN>;

    stakeLastEpoch(arg0: string, arg1: string): TransactionObject<BN>;

    stakeWithdrawDisallowPeriod(): TransactionObject<BN>;

    stakingEpoch(): TransactionObject<BN>;

    stakingEpochDuration(): TransactionObject<BN>;

    stakingEpochEndBlock(): TransactionObject<BN>;

    stakingEpochStartBlock(): TransactionObject<BN>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
