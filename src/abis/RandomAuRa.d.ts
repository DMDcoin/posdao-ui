/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class RandomAuRa extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): RandomAuRa;
  methods: {
    collectRoundLength(): TransactionObject<BN>;

    revealSkips(arg0: number | string, arg1: string): TransactionObject<BN>;

    sentReveal(arg0: number | string, arg1: string): TransactionObject<boolean>;

    currentSeed(): TransactionObject<BN>;

    validatorSetContract(): TransactionObject<string>;

    commitHash(
      _secretHash: string | number[],
      _cipher: string | number[]
    ): TransactionObject<void>;

    revealSecret(_secret: number | string): TransactionObject<void>;

    initialize(
      _collectRoundLength: number | string,
      _validatorSet: string
    ): TransactionObject<void>;

    onFinishCollectRound(): TransactionObject<void>;

    commitPhaseLength(): TransactionObject<BN>;

    currentCollectRound(): TransactionObject<BN>;

    getCipher(
      _collectRound: number | string,
      _miningAddress: string
    ): TransactionObject<string>;

    getCommit(
      _collectRound: number | string,
      _miningAddress: string
    ): TransactionObject<string>;

    isCommitted(
      _collectRound: number | string,
      _miningAddress: string
    ): TransactionObject<boolean>;

    isCommitPhase(): TransactionObject<boolean>;

    isInitialized(): TransactionObject<boolean>;

    isRevealPhase(): TransactionObject<boolean>;

    commitHashCallable(
      _miningAddress: string,
      _secretHash: string | number[]
    ): TransactionObject<boolean>;

    revealSecretCallable(
      _miningAddress: string,
      _secret: number | string
    ): TransactionObject<boolean>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
